{"version":3,"sources":["components/Header/index.js","components/Player/index.js","components/Footer/index.js","components/App/index.js","index.js"],"names":["Header","className","STATUS","Player","useState","status","setStatus","sources","setSources","count","setCount","undefined","activeId","setActiveId","time","useRef","containerRef","playersRef","Set","onRef","player","current","add","useEffect","length","onPlay","useCallback","throttle","id","console","log","audio","audioId","dataset","duration","currentTime","paused","play","pause","type","accept","multiple","onChange","inputEvent","files","target","i","file","reader","FileReader","onload","readerEvent","prevSources","String","name","blob","URL","createObjectURL","Blob","result","readAsArrayBuffer","ref","map","source","cn","item__active","controls","data-id","muted","src","onMouseOver","e","onSeeked","onTimeUpdate","Footer","href","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAEaA,EAAS,WAClB,OAAQ,qBAAKC,UAAU,SAAf,SACJ,qBAAKA,UAAU,OAAf,2C,sDCCFC,G,MACK,SADLA,EAEO,UAFPA,EAGK,QAGEC,EAAS,WAAO,IAAD,EACIC,mBAASF,GADb,mBACjBG,EADiB,KACTC,EADS,OAEMF,mBAAS,IAFf,mBAEjBG,EAFiB,KAERC,EAFQ,OAGEJ,mBAAS,GAHX,mBAGjBK,EAHiB,KAGVC,EAHU,OAIQN,wBAASO,GAJjB,mBAIjBC,EAJiB,KAIPC,EAJO,KAKlBC,EAAOC,iBAAO,GACdC,EAAeD,mBACfE,EAAaF,iBAAO,IAAIG,KAExBC,EAAQ,SAACC,GACPA,GACAH,EAAWI,QAAQC,IAAIF,IAyB/BG,qBAAU,WACFd,EAAQ,GAAKF,EAAQiB,SAAWf,GAChCH,EAAUJ,KAEf,CAACK,EAASE,IAEb,IAAMgB,EAASC,sBACXC,KAAS,YAAW,IAATC,EAAQ,EAARA,GACPC,QAAQC,IAAI,YAAa,CAACF,KAAIhB,aADf,oBAEGK,EAAWI,SAFd,IAEf,2BAAsC,CAAC,IAA9BU,EAA6B,QAC5BC,EAAUD,EAAME,QAAQL,GAC1BI,IAAYJ,EACRI,IAAYpB,GAAYmB,EAAMG,UAAYpB,EAAKO,UAC/CU,EAAMI,YAAcrB,EAAKO,QACrBU,EAAMK,QACNL,EAAMM,QAIdN,EAAMO,SAZC,8BAefzB,EAAYe,KACb,KACH,CAAChB,IAgBL,OAAIP,IAAWH,EACH,uBACJqC,KAAK,OACLC,OAAO,UACPC,UAAQ,EACRC,SAlES,SAACC,GACdrC,EAAUJ,GADmB,IAEtB0C,EAASD,EAAWE,OAApBD,MACPlC,EAASkC,EAAMpB,QACf,IAJ6B,eAIpBsB,GACL,IAAMC,EAAOH,EAAME,GACbE,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,GACb3C,GAAW,SAAC4C,GAAD,4BACJA,GADI,CAEP,CACIxB,GAAIyB,OAAOP,GACXQ,KAAMP,EAAKO,KACXC,KAAMC,IAAIC,gBAAgB,IAAIC,KAAK,CAACP,EAAYN,OAAOc,QAAS,CAACpB,KAAMQ,EAAKR,eAIxFS,EAAOY,kBAAkBhB,EAAME,KAb1BA,EAAI,EAAGA,EAAIF,EAAMpB,OAAQsB,IAAM,EAA/BA,MAkETzC,IAAWH,EACH,qBAAKD,UAAU,SAAf,wBAGRI,IAAWH,EACJ,qBAAKD,UAAU,SAAS4D,IAAK7C,EAA7B,SACFT,EAAQuD,KAAI,SAACC,GAAD,OAAa,sBAEtB9D,UAAW+D,IAAG,OAAQ,CAACC,aAAcF,EAAOnC,KAAOhB,IAF7B,UAItB,qBAAKX,UAAU,cAAf,SAA8B8D,EAAOT,OACrC,uBACIO,IAAK1C,EACL+C,UAAQ,EACRC,UAASJ,EAAOnC,GAChBwC,OAAO,EACPC,IAAKN,EAAOR,KACZe,YAAa,kBAAM7C,EAAO,CAACG,GAAImC,EAAOnC,MACtCH,OAAQ,SAAC8C,GAAD,OAAO9C,EAAO,CAACG,GAAImC,EAAOnC,MAClC4C,SAAU,SAACD,GAAD,OAlCT,SAAC,GAAc,IAAb1B,EAAY,EAAZA,OACXA,EAAOT,QACPS,EAAOR,OAgCkBmC,CAASD,IAC1BE,aAAc,SAACF,GAAD,OA1CT,SAAC,GAAuB,IAAtBpC,EAAqB,EAArBA,YAAqB,EAARP,KACrBhB,IAGXE,EAAKO,QAAUc,GAsCkBsC,CAAa,CAC9BtC,YAAaoC,EAAE1B,OAAOV,YACtBP,GAAImC,EAAOnC,UAfdmC,EAAOnC,SAsBjB,MC3HE8C,G,MAAS,WAClB,OAAQ,qBAAKzE,UAAU,SAAf,SACJ,sBAAKA,UAAU,aAAf,uBACc,gDADd,OACiC,mBAAG0E,KAAK,+BAA+B9B,OAAO,SAA9C,+BCAlC,SAAS+B,IACZ,OACI,sBAAK3E,UAAU,MAAf,UACI,cAAC,EAAD,IACA,qBAAKA,UAAU,OAAf,SACI,cAAC,EAAD,MAEJ,cAAC,EAAD,OCNZ4E,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9a49f996.chunk.js","sourcesContent":["import './index.css';\n\nexport const Header = () => {\n    return (<div className=\"header\">\n        <div className=\"logo\">Compare audio side by side</div>\n    </div>);\n}","import {useState, useRef, useEffect, useCallback} from \"react\";\nimport cn from 'classnames';\nimport throttle from 'lodash.debounce';\nimport './index.css';\n\nconst STATUS = {\n    empty: \"empty\",\n    loading: \"loading\",\n    ready: \"ready\",\n}\n\nexport const Player = () => {\n    const [status, setStatus] = useState(STATUS.empty);\n    const [sources, setSources] = useState([]);\n    const [count, setCount] = useState(0);\n    const [activeId, setActiveId] = useState(undefined);\n    const time = useRef(0);\n    const containerRef = useRef();\n    const playersRef = useRef(new Set());\n\n    const onRef = (player) => {\n        if (player) {\n            playersRef.current.add(player);\n        }\n    }\n\n    const onChange = (inputEvent) => {\n        setStatus(STATUS.loading);\n        const {files} = inputEvent.target;\n        setCount(files.length);\n        for (let i = 0; i < files.length; i++) {\n            const file = files[i];\n            const reader = new FileReader();\n            reader.onload = (readerEvent) => {\n                setSources((prevSources) => ([\n                    ...prevSources,\n                    {\n                        id: String(i),\n                        name: file.name,\n                        blob: URL.createObjectURL(new Blob([readerEvent.target.result], {type: file.type}))\n                    }\n                ]));\n            };\n            reader.readAsArrayBuffer(files[i]);\n        }\n    }\n\n    useEffect(() => {\n        if (count > 0 && sources.length === count) {\n            setStatus(STATUS.ready);\n        }\n    }, [sources, count]);\n\n    const onPlay = useCallback(\n        throttle(({id}) => {\n            console.log('>> onPlay', {id, activeId});\n            for (let audio of playersRef.current) {\n                const audioId = audio.dataset.id;\n                if (audioId === id) {\n                    if (audioId !== activeId && audio.duration >= time.current) {\n                        audio.currentTime = time.current;\n                        if (audio.paused) {\n                            audio.play();\n                        }\n                    }\n                } else {\n                    audio.pause();\n                }\n            }\n            setActiveId(id);\n        }, 100),\n        [activeId]\n    )\n\n    const onTimeUpdate = ({currentTime, id}) => {\n        if (id !== activeId) {\n            return;\n        }\n        time.current = currentTime;\n    }\n\n    const onSeeked = ({target}) => {\n        if (target.paused) {\n            target.play();\n        }\n    }\n\n    if (status === STATUS.empty) {\n        return (<input\n            type=\"file\"\n            accept=\"audio/*\"\n            multiple\n            onChange={onChange}\n        />);\n    }\n\n    if (status === STATUS.loading) {\n        return (<div className=\"loader\">loading...</div>);\n    }\n\n    if (status === STATUS.ready) {\n        return <div className=\"player\" ref={containerRef}>\n            {sources.map((source) => (<div\n                key={source.id}\n                className={cn(\"item\", {item__active: source.id === activeId})}\n            >\n                <div className=\"item__title\">{source.name}</div>\n                <audio\n                    ref={onRef}\n                    controls\n                    data-id={source.id}\n                    muted={false}\n                    src={source.blob}\n                    onMouseOver={() => onPlay({id: source.id})}\n                    onPlay={(e) => onPlay({id: source.id})}\n                    onSeeked={(e) => onSeeked(e)}\n                    onTimeUpdate={(e) => onTimeUpdate({\n                        currentTime: e.target.currentTime,\n                        id: source.id,\n                    })}\n                />\n            </div>))}\n        </div>\n    }\n\n    return null;\n}","import './index.css';\n\nexport const Footer = () => {\n    return (<div className=\"footer\">\n        <div className=\"disclaimer\">\n            Made with <span>ðŸ–¤</span> by <a href=\"https://linktr.ee/futurfrukt\" target=\"_blank\">FuturFrukt</a>\n        </div>\n    </div>);\n}","import './index.css';\nimport {Header} from \"../Header\";\nimport {Player} from \"../Player\";\nimport {Footer} from \"../Footer\";\n\nexport function App() {\n    return (\n        <div className=\"app\">\n            <Header/>\n            <div className=\"main\">\n                <Player/>\n            </div>\n            <Footer/>\n        </div>\n    );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}